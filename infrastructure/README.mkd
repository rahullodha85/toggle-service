This contains the Concourse pipelines to test-build-deploy Toggle Service and the Terraform files declaring the infrastructure to deploy on AWS.

## How-to setup Pipeline

Follow these steps *once* to setup the pipeline for your current branch on your Concourse target server.

The `pipeline.yml` configuration includes "CI" jobs (test, build, deploy...) and the "PuP" jobs (update-pipeline, execute-pipeline).
After set-up, the created pipeline will show 2 [groups](https://concourse.ci/configuring-groups.html) of jobs on the Concourse UI.

*What is "Pup"?*
By "PuP" we mean "Pipeline updating Pipeline", as in pipeline jobs that automatically update the pipeline on Concourse when triggered by changes on pipeline config files in this repo.
This mean the pipeline, once set on Concourse, will auto-update itself

### Prerequisite: Login into your Concourse target

To use Concourse on AWS pre-prod, first login to your team
```
fly login \
    -t <TARGET> -c <CONCOURSE_URL> \
    -u <CONCOURSE_USERNAME> -p <CONCOURSE_PASSWORD>
```

### 1. Set env variables:
```
export TARGET=<fillme>
export SECRETS_FILE=<fillme>
```

where ```TARGET``` is the name you chose when you logged into your Concourse server````SECRETS_FILE``` should be set to the absolute or relative path of your secret variable file. You must specify the following vars:

    ```
    git-user: FILL_ME
    git-token-password: FILL_ME

    artifactory-username: FILL_ME
    artifactory-password: FILL_ME

    concourse-username: FILL_ME
    concourse-password: FILL_ME
    new_relic_license_key: FILL_ME
    ```

### 2. Setup pipeline (one-off script)
From the repo's root dir, run:
```
infrastructure/pipelines/setup-pipeline.sh
```

## Notes
* you need to do this procedure only the first time
* when you make changes to PuP's jobs, they will eventually be applied by PuP itself after the `update-pipeline` job runs





